openapi: "3.0.0"
info:
  version: 1.0.0
  title:  CoffeeShop API
servers:
  - url: http://127.0.0.1:5000/
paths:
  /employees:
    get:
      summary: Lists all employees
      operationId: models-api.employeeapi.list_employees
      responses:
        '200':
          description: A list of the employees in the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employees"
    post:
      summary: Create an employee
      operationId: models-api.employeeapi.add_employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employee"

      responses:
        '201':
          description: create an employee object, add it to the employees list ad return it's ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employee"
        '500':
          description: employee already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /employees/{id}:
    get:
      summary: Info for a specific employee
      operationId: models-api.employeeapi.employee_details
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the employee to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: retrieving the employee information with the ID was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employee"
        '404':
          description: the request was not valid, employee doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    put:
      summary: update Info for a specific employee
      operationId: models-api.employeeapi.update_employee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employee"
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the employee to update
          schema:
            type: integer
      responses:
        '201':
          description: updating the employee information with the ID was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/employee"
        '404':
          description: the request was not valid, employee doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /items:
    get:
      summary: Lists all items in he menu
      operationId: models-api.itemapi.list_items
      responses:
        '200':
          description: A list of the items in the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/items"
    post:
      summary: Create an item
      operationId: models-api.itemapi.add_item
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/item"
      responses:
        '201':
          description: create an item object, add it to the employees list ad return it's ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        '500':
          description: employee already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /items/{id}:
      get:
        summary: Info for a specific item
        operationId: models-api.itemapi.item_details
        parameters:
          - name: id
            in: path
            required: true
            description: The id of the item to retrieve
            schema:
              type: integer
        responses:
          '200':
            description: retrieving the employee information with the ID was successful
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/item"
          '404':
            description: the request was not valid, employee doesn't exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/error"
      put:
        summary: update Info for a specific item
        operationId: models-api.itemapi.update_item
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/item"
        parameters:
          - name: id
            in: path
            required: true
            description: The id of the item to update
            schema:
              type: integer
        responses:
          '201':
            description: updating the item information with the ID was successful
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/item"
          '404':
            description: the request was not valid, employee doesn't exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/error"
      delete:
        summary: delete the item with the id
        operationId: models-api.itemapi.delete_item
        parameters:
          - name: id
            in: path
            required: true
            description: The id of the item to delete
            schema:
              type: integer
        responses:
          '200':
            description: deleting the item with the ID was successful
          '404':
            description: the request was not valid, item doesn't exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/error"
  /customers:
    get:
      summary: Lists all customers in the server
      operationId: models-api.customerapi.list_customers
      responses:
        '200':
          description: A list of the customers in the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/items"
    post:
      summary: Create a customer object
      operationId: models-api.customerapi.add_customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customer"

      responses:
        '201':
          description: create an customer object, return it's ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
        '500':
          description: employee already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /customers/{id}:
      get:
        summary: Info for a specific customer
        operationId: models-api.customerapi.customer_details
        parameters:
          - name: id
            in: path
            required: true
            description: The id of the customer to retrieve
            schema:
              type: integer
        responses:
          '200':
            description: retrieving the customer information with the ID was successful
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/customer"
          '404':
            description: the request was not valid, customer doesn't exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/error"
      put:
        summary: update Info for a specific customer
        operationId: models-api.customerapi.update_customer
        requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"
        parameters:
          - name: id
            in: path
            required: true
            description: The id of the customer to update
            schema:
              type: integer
        responses:
          '201':
            description: updating the customer information with the ID was successful
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/customer"
          '404':
            description: the request was not valid, customer doesn't exist
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/error"
  /orders:
    get:
      summary: Lists all orders in the server
      operationId: models-api.orderapi.list_orders
      responses:
        '200':
          description: A list of the orders in the server
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/orders"
    post:
      summary: Create an order object
      operationId: models-api.orderapi.add_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/order"

      responses:
        '201':
          description: create an order object, return it's ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order"
        '500':
          description: order already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /orders/{id}:
    get:
      summary: Info for a specific order
      operationId: models-api.orderapi.order_details
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the order to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: retrieving the order information with the ID was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order"
        '404':
          description: the request was not valid, order doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    put:
      summary: update Info for a specific order
      operationId: models-api.orderapi.update_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/order"
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the order to update
          schema:
            type: integer
      responses:
        '201':
          description: updating the order information with the ID was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order"
        '404':
          description: the request was not valid, order doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
    delete:
      summary: cancel a specific order
      operationId: models-api.orderapi.delete_order
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the order to update
          schema:
            type: integer
      responses:
        '201':
          description: updating the order information with the ID was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/order"
        '404':
          description: the request was not valid, order doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /orders/{id}/item:
    post:
      summary: add an item for a specific order
      operationId: models-api.orderapi.add_item_to_order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/orderItem"
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the order to update
          schema:
            type: integer
      responses:
        '201':
          description: updating the order information with the ID was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/orderItem"
        '404':
          description: the request was not valid, order doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /orders/{id}/item/{item_id}:
    delete:
      summary: cancel a specific item in an order
      operationId: models-api.orderapi.delete_item_from_order
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the order to update
          schema:
            type: integer
        - name: item_id
          in: path
          required: true
          description: The id of the item to cancel
          schema:
            type: integer
      responses:
        '201':
          description: deleting the item in order with the ID was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/orderItem"
        '404':
          description: the request was not valid, item doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
  /bills/{id}:
    get:
      summary: Info for a specific bill
      operationId: models-api.billapi.bill_details
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the bill to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: retrieving the bill information with the ID was successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/bill"
        '404':
          description: the request was not valid, bill doesn't exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

components:
    schemas:
      employee:
        type: object
        required:
          - id
          - name
          - phoneNumber
          - role
          - work_status
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          phoneNumber:
            type: string
          role:
            type: string
          work_status :
            type: string
      item:
        type: object
        required:
          - id
          - name
          - price
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          price:
            type: number
            format: float
      customer:
        type: object
        required:
          - id
          - name
          - phoneNumber
        properties:
          id:
            type: integer
            format: int64
          name:
            type: string
          price:
            type: string
      order:
        type: object
        required:
          - id
          - employee_id
          - customer_id
          - order_status
          - customer_notes
          - order_items
        properties:
          id:
            type: integer
            format: int64
          employee_id:
            type: integer
            format: int64
          customer_id:
            type: integer
            format: int64
          order_status:
            type: string
          customer_notes:
            type: string
          order_items:
            type: array
            $ref: "#/components/schemas/orderItems"
      bill:
        type: object
        required:
          - order_id
          - customer_id
          - employee_id
          - price
          - date_time
        properties:
          order_id:
            type: integer
            format: int64
          customer_id:
            type: integer
            format: int64
          employee_id:
            type: integer
            format: int64
          price:
            type: number
            format: float
          date_time:
            type: string
            format: date-time

      orderItem:
        type: object
        required:
          - item_id
          - quantity
          - description
        properties:
          item_id:
            type: integer
            format: int64
          quantity:
            type: integer
            format: int64
          customer_notes:
            type: string

      orderItems:
        type: array
        items:
          type: object
          required:
            - item_id
            - quantity
            - description
          properties:
            item_id:
              type: integer
              format: int64
            quantity:
              type: integer
              format: int64
            customer_notes:
              type: string
      employees:
        type: array
        items:
          $ref: "#/components/schemas/employee"
      items:
        type: array
        items:
          $ref: "#/components/schemas/item"
      customers:
        type: array
        items:
          $ref: "#/components/schemas/customer"
      orders:
        type: array
        items:
          $ref: "#/components/schemas/order"
      error:
        type: object
        required:
          - error
        properties:
          error:
            type: string
